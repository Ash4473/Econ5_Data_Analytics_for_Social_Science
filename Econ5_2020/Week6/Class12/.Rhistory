position=1
insertNodeAtPosition(head, data, position)
rm(head)
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[position+1:length(head)-position]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=1
insertNodeAtPosition(head, data, position)
vec2 <- head[position+1:length(head)-position]
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[-c(1:position)]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=1
insertNodeAtPosition(head, data, position)
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[-c(1:position)]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=2
insertNodeAtPosition(head, data, position)
z= ["{", "}"]
{=={
query <- function(queue,type, x){
if (type==1){
queque= c(queque, x)
}
if (type==2) {
queque= queque[-1]
}
if (type==3){
return(queque[1])
}
}
queque=[]
type= 1
x=42
queque=[NA]
type= 1
x=42
queque <- c()
query(queque,type,x)
queque
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
queue= queue[-1]
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
queue
if (type==1){
queue= c(queue, x)
}
if (type==2) {
queue= queue[-1]
}
if (type==3){
return(queue[1])
}
queue
type=2
query(queue,type,x)
queue
type=2
query(queue,type,x)
queue
queue[-1]
queue= queue[-c(1)]
queue
x= c(1,2,3)
x[-1]
type=1
x=14
query(queue,type,x)
queue
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c(NA)
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
type=2
query(queue,type,x)
type=1
x=14
query(queue,type,x)
queue
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
queue
rm(queue)
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
queue
c(queue,42)
query <- function(queue,type, x){
if (type==1) {
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
query <- function(queue,type, x){
if (type==1) {
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
return(queue)
}
queue <- c()
type= 1
x=42
query(queue,type,x)
type=2
query(queue,type,x)
type=1
x=14
query(queue,type,x)
type=3
query(queue,type,x)
queue
type=1
x=14
query(queue,type,x)
query <- function(queue,type, x){
if (type==1) {
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
return(queue)
}
queue <- c()
type= 1
x=42
queue <-query(queue,type,x)
type=2
queue <-query(queue,type,x)
type=1
x=14
queue <-query(queue,type,x)
type=3
queue <-query(queue,type,x)
queue
matrix(1,2; 3,4)
which(letters=="b")
data()
install.packages("party")
library(party)
print(BostonHomicide)
inputData <- BostonHomicide
install.packages("party")
library(party)
installed.packages(party)
install.packages("multcomp")
library(multcomp)
search(party)
install.packages("party")
library(party)
install("rpart")
library(rpart)
data <- car.test.frame
z.auto <- rpart(Mileage ~ Weight, car.test.frame)
summary(z.auto)
plot(z.auto)
plot(z.auto)
plot(z.auto.png)
png(z.auto)
plot(z.auto)
install.packages("partykit")
library(partykit)
getwd()
setwd("/Users/arushikaushik/R/Packages")
setwd("/Users/arushikaushik/R")
x <- c(1,2,1,1,2)
table(x)
x
prop.table(x)
prop.table(as.factor(x))
y= as.factor(x)
y
prop.table(y)
summary(x)
matrix(x)
prop.table(table(x))
y= c(3,4,5,6,7)
matrix(x,y)
cbind(matrix(x),y)
install.packages("party")
library(party)
install.packages("mvtnorm")
library(mvtnorm)
install.packages("mvtnorm")
install.packages(("multcomp"))
install.packages("multcomp")
install.packages((party))
install.packages("party")
library(party)
library(multcomp)
install.packages("multcomp")
install.packages("party")
library(party)
vec <- strsplit("word", split=NULL)
vec
unlist(strsplit("word", split=NULL))
x= unlist(strsplit("word", split=NULL))
x[3]
library(ggplot2)
x= c(1,2,3, NA)
is.na(x)
na.rm
mean(x, na.rm=T)
mean(x, !is.na(x))
mean(!is.na(x))
rm(list=ls())
5+3
5-3
5*3
5^2
log(5)
sqrt(5)
5+3
5-3
5*3
5^2
log(5)
sqrt(5)
object_1 <- 5+3
object_1 <- 5-3
rm(list=ls())
5+3
5-3
5*3
5/3
5^2
log(5)
sqrt(5)
5+3
5-3
5*3
5/3
5^2
log(5)
sqrt(5)
object_1 <- 5+3
object_1
class(object_1)
object_1 <- 5-3
MySchool <- "UCSD"
class(MySchool)
vector.1 <- c(93,92, 83, 99, 96, 97)
vector.1[2]
vector.1[4]
vector.1[c(1,3)]
vector.1[-6]
vector.1
rm(list=ls())
"Triton" != "triton"
5<3 | FALSE
vec1 <- c(TRUE, TRUE, FALSE, TRUE)
sum(vec1)
sum(vec1) >3
list1 <- 1:5
list1
list1>3
(list1 >1) & (list1 <5)
seq1 <- seq(1,5,0.5)
seq1
(seq1 >1) & (seq1 <5)
seq2 <- seq(10,20,length.out = 6)
seq2
class(x)
x=5
class(x)
y= "my name is King Triton"
class(y)
z=TRUE
class(z)
z.str <- c("1", "2", "602")
z.num <- as.numeric(z.str)
z.str
z.num
z.num + c(1,1,1)
z.str + c(1,1,1)
a_num <- c(1,2,3, 3498)
a_str <- as.character(a_num)
a_num
a_str
a_num + c(1,1,1,1)
a_str + c(1,1,1,1)
is.character(z.num)
is.character(z.str)
is.numeric(a_num)
is.numeric(a_str)
is.na(a_num)
isTRUE(TRUE)
isTRUE(FALSE)
isTRUE(T)
isTRUE(1)
as.integer(TRUE)
T<- 1
isTRUE(T)
mean(logic)
logic <- c(TRUE, TRUE, FALSE, TRUE)
mean(logic)
sum(logic)
vec2 <- c(1,2,3)
vec2
class(vec2)
typeof(vec2)
vec2[1] = "text"
vec2
class(vec2)
TRUE == "TRUE"
resume <- read.csv("resume.csv")
setwd("Users/arushikaushik/Desktop/Teaching/2020/Week6/Class12")
resume <- read.csv("resume.csv")
setwd("Users/arushikaushik/Desktop/Teaching/2020/Week6/Class12")
setwd("Users/arushikaushik/Desktop/Teaching/Poli:Econ5/2020/Week6/Class12")
setwd("Users/arushikaushik/Desktop/Teaching/Poli:Econ5/2020/Week6/Class12")
getwd()
setwd("/Users/arushikaushik/Desktop/Teaching/Poli:Econ5/2020/Week6/Class12")
resume <- read.csv("resume.csv")
resume$race[1:5]
View(resume)
resume[,"race"]
black1 <- resume$call[resume$race== "black"]
summary(resume$race)
mean(black1)
black2 <- subset (resume, select= c("firstname", "sex", "call"), subset= (race=="black"))
View(black2)
mean(black2$call)
rm(list = ls())
"Triton" != "triton"
5<3 | FALSE
vec1 <- c(TRUE, TRUE, FALSE, TRUE)
sum(vec1)
## Logical Operations on vectors
sum(vec1) >3
list1 <- 1:5
list1
list1>3
(list1 >1) & (list1 <5)
seq1 <- seq(1,5,0.5)
seq1
(seq1 >1) & (seq1 <5)
seq2 <- seq(10,20,length.out = 6)
seq2
x=5
class(x)
y= "my name is King Triton"
class(y)
z=TRUE
class(z)
z.str <- c("1", "2", "602")
z.num <- as.numeric(z.str)
z.str
z.num
z.num + c(1,1,1)
z.str + c(1,1,1)
a_num <- c(1,2,3, 3498)
a_str <- as.character(a_num)
a_num
a_str
a_num + c(1,1,1,1)
a_str + c(1,1,1,1)
is.character(z.num)
is.character(z.str)
is.numeric(a_num)
is.numeric(a_str)
is.na(a_num)
letters
LETTERS
which(letters=="a")
which(LETTERS== "P")
which(letters != "p")
isTRUE(TRUE)
isTRUE(FALSE)
isTRUE(T)
isTRUE(1)
as.integer(TRUE)
T<- 1
isTRUE(T)
logic <- c(TRUE, TRUE, FALSE, TRUE)
mean(logic)
sum(logic)
vec2 <- c(1,2,3)
vec2
class(vec2)
typeof(vec2)
vec2[1] = "text"
class(vec2)
vec2
TRUE == "TRUE"
setwd("/Users/arushikaushik/Desktop/Teaching/Poli:Econ5/2020/Week6/Class12")
resume <- read.csv("resume.csv")
resume$race[1:5]
View(resume)
class(resume$race)
resume[,"race"]
mydata <- resume$race[1:5]
mydata2 <-resume[,"race"]
resume[,"race"]
black1 <- resume$call[resume$race== "black"]
summary(resume$race)
mean(black1)
black2 <- subset (resume, select= c("firstname", "sex", "call"), subset= (race=="black"))
mean(black2$call)
