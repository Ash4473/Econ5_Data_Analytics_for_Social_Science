b[i]= a[i+d]
}
b[(length(a)-d+1): length(a)]= a[1:d]
return(b)
}
a <- c(1, 2, 3, 4, 5)
d=4
rotLeft(a,d)
insertNodeAtPosition <- function(head, data, position){
head[position+1]= data
return(head)
}
head= c(16,13,7)
data=1
position=2
insertNodeAtPosition(head, data, position)
insertNodeAtPosition <- function(head, data, position){
head[length(head)+1]= NA
head[position+2 : length(head)]= head[position : length(head)]
head[position+1]= data
return(head)
}
head= c(16,13,7)
data=1
position=2
insertNodeAtPosition(head, data, position)
insertNodeAtPosition <- function(head, data, position){
head[length(head)+1]= NA
head[position+2 : length(head)]= head[position +1 : length(head)]
head[position+1]= data
return(head)
}
head= c(16,13,7)
data=1
position=2
insertNodeAtPosition(head, data, position)
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[position+1 : length(head)]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=2
insertNodeAtPosition(head, data, position)
rm(head)
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[position+1 : length(head)]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=2
insertNodeAtPosition(head, data, position)
vec1
vec1 <- head[1: position]
vec1
vec2 <- head[position+1 : length(head)]
vec2
head[3:3]
length(head)
vec2 <- head[position+1 : length(head)]
vec2
head
vec2 <- head[position+1:length(head)]
vec2
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[position+1:length(head)]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=1
insertNodeAtPosition(head, data, position)
vec2 <- head[position+1:length(head)-position]
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[position+1:length(head)-position]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=1
insertNodeAtPosition(head, data, position)
rm(head)
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[position+1:length(head)-position]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=1
insertNodeAtPosition(head, data, position)
vec2 <- head[position+1:length(head)-position]
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[-c(1:position)]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=1
insertNodeAtPosition(head, data, position)
insertNodeAtPosition <- function(head, data, position){
vec1 <- head[1: position]
vec2 <- head[-c(1:position)]
head <- c(vec1, data, vec2)
return(head)
}
head= c(16,13,7)
data=1
position=2
insertNodeAtPosition(head, data, position)
z= ["{", "}"]
{=={
query <- function(queue,type, x){
if (type==1){
queque= c(queque, x)
}
if (type==2) {
queque= queque[-1]
}
if (type==3){
return(queque[1])
}
}
queque=[]
type= 1
x=42
queque=[NA]
type= 1
x=42
queque <- c()
query(queque,type,x)
queque
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
queue= queue[-1]
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
queue
if (type==1){
queue= c(queue, x)
}
if (type==2) {
queue= queue[-1]
}
if (type==3){
return(queue[1])
}
queue
type=2
query(queue,type,x)
queue
type=2
query(queue,type,x)
queue
queue[-1]
queue= queue[-c(1)]
queue
x= c(1,2,3)
x[-1]
type=1
x=14
query(queue,type,x)
queue
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c(NA)
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
type=2
query(queue,type,x)
type=1
x=14
query(queue,type,x)
queue
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
queue
rm(queue)
query <- function(queue,type, x){
if (type==1){
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
queue
c(queue,42)
query <- function(queue,type, x){
if (type==1) {
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
}
queue <- c()
type= 1
x=42
query(queue,type,x)
query <- function(queue,type, x){
if (type==1) {
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
return(queue)
}
queue <- c()
type= 1
x=42
query(queue,type,x)
type=2
query(queue,type,x)
type=1
x=14
query(queue,type,x)
type=3
query(queue,type,x)
queue
type=1
x=14
query(queue,type,x)
query <- function(queue,type, x){
if (type==1) {
queue= c(queue, x)
}
if (type==2) {
if (length(queue) != 1) {
queue= queue[-c(1)]
}
if (length(queue) == 1) {
queue= c()
}
}
if (type==3){
return(queue[1])
}
return(queue)
}
queue <- c()
type= 1
x=42
queue <-query(queue,type,x)
type=2
queue <-query(queue,type,x)
type=1
x=14
queue <-query(queue,type,x)
type=3
queue <-query(queue,type,x)
queue
matrix(1,2; 3,4)
which(letters=="b")
data()
install.packages("party")
library(party)
print(BostonHomicide)
inputData <- BostonHomicide
install.packages("party")
library(party)
installed.packages(party)
install.packages("multcomp")
library(multcomp)
search(party)
install.packages("party")
library(party)
install("rpart")
library(rpart)
data <- car.test.frame
z.auto <- rpart(Mileage ~ Weight, car.test.frame)
summary(z.auto)
plot(z.auto)
plot(z.auto)
plot(z.auto.png)
png(z.auto)
plot(z.auto)
install.packages("partykit")
library(partykit)
getwd()
setwd("/Users/arushikaushik/R/Packages")
setwd("/Users/arushikaushik/R")
x <- c(1,2,1,1,2)
table(x)
x
prop.table(x)
prop.table(as.factor(x))
y= as.factor(x)
y
prop.table(y)
summary(x)
matrix(x)
prop.table(table(x))
y= c(3,4,5,6,7)
matrix(x,y)
cbind(matrix(x),y)
install.packages("party")
library(party)
install.packages("mvtnorm")
library(mvtnorm)
install.packages("mvtnorm")
install.packages(("multcomp"))
install.packages("multcomp")
install.packages((party))
install.packages("party")
library(party)
library(multcomp)
install.packages("multcomp")
install.packages("party")
library(party)
vec <- strsplit("word", split=NULL)
vec
unlist(strsplit("word", split=NULL))
x= unlist(strsplit("word", split=NULL))
x[3]
library(ggplot2)
x= c(1,2,3, NA)
is.na(x)
na.rm
mean(x, na.rm=T)
mean(x, !is.na(x))
mean(!is.na(x))
rm(list=ls())
5+3
5-3
5*3
5^2
log(5)
sqrt(5)
5+3
5-3
5*3
5^2
log(5)
sqrt(5)
object_1 <- 5+3
object_1 <- 5-3
rm(list=ls())
5+3
5-3
5*3
5/3
5^2
log(5)
sqrt(5)
5+3
5-3
5*3
5/3
5^2
log(5)
sqrt(5)
object_1 <- 5+3
object_1
class(object_1)
object_1 <- 5-3
MySchool <- "UCSD"
class(MySchool)
vector.1 <- c(93,92, 83, 99, 96, 97)
vector.1[2]
vector.1[4]
vector.1[c(1,3)]
vector.1[-6]
vector.1
rm(list=ls())
5+3
5-3
5*3
5/3
5^2
log(5)
sqrt(5)
5+3
5-3
5*3
5/3
5^2
log(5)
sqrt(5)
object_1 <- 5+3
object_1
class(object_1)
object_1 <- 5-3
MySchool <- "UCSD"
class(MySchool)
vector.1 <- c(93,92,83,99,96,97)
re <- c(1,2, "UCSD")
vector.1[2]
vector.1[4]
vector.1[c(1,3)]
vector.2 <- vector.1[-6]
vector.1*100
vec1 = c(1,2,3)
vec2 = c(3,3,3)
vec1 + vec2
vec1 - vec2
vec1*vec2
vec1/vec2
length(vector.1)
min(vector.1)
max(vector.1)
range(vector.1)
mean(vector.1)
sum(vector.1)
mean(re)
getwd()
setwd("/Users/arushikaushik/Desktop/Teaching/Poli:Econ5/2020/Week6/Class11")
getwd()
load("resume.RData")
mydata <- read.csv("resume.csv")
View(mydata)
View(resume)
mydata <- mydata[2:6]
View(mydata)
names(resume)
nrow(resume)
ncol(resume)
dim(resume)
head(resume)
tail(resume)
summary(resume)
resume[1:4, "firstname"]
resume[1:4, 2]
resume[1:4,]
resume[, "firstname"]
head(resume$firstname, 3)
write.csv(resume, file="resume.csv")
save(resume, file= "resume.RData")
